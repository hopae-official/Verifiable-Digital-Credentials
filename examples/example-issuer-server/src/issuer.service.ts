import { Injectable, NotImplementedException } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { createPrivateKey, createSign, KeyObject } from 'crypto';
import { SDJwtVcInstance } from '@sd-jwt/sd-jwt-vc';
import { digest, generateSalt } from '@sd-jwt/crypto-nodejs';

type UniversityCredential = {
  name: string;
  birthdate: string;
  university_name: string;
  degree: string;
};

type VaccinationCredential = {
  name: string;
  birthdate: string;
  vaccine_name: string;
  address: string;
};

type VC = {
  vct: string;
  iss: string;
};

@Injectable()
export class IssuerService {
  private priKey: KeyObject;
  private sdJwtInstance: SDJwtVcInstance;
  private credentialIssuer: string;

  constructor(private readonly configService: ConfigService) {
    this.credentialIssuer = this.configService.getOrThrow('ISSUER');
    const jwkStr = this.configService.get('JWK');
    const jwk = JSON.parse(jwkStr);
    this.priKey = createPrivateKey({
      key: { ...jwk, kty: 'EC' },
      format: 'jwk',
    });

    this.sdJwtInstance = new SDJwtVcInstance({
      hashAlg: 'sha-256',
      hasher: digest,
      saltGenerator: generateSalt,
      signAlg: 'ES256',
      signer: this.signer.bind(this),
    });
  }

  private signer(data: string): string {
    const signer = createSign('SHA256');

    // Update the signer with the data
    signer.update(data);

    // Sign the data and get the signature in DER format

    const signature = signer.sign({
      key: this.priKey,
      dsaEncoding: 'ieee-p1363', // Use raw format (r || s) for ES256
    });

    // Convert the signature to base64url encoding
    // base64url is base64 with '+' replaced by '-', '/' replaced by '_', and no padding '='
    return signature
      .toString('base64')
      .replace(/\+/g, '-')
      .replace(/\//g, '_')
      .replace(/=/g, '');
  }

  async createVc(type: string) {
    if (type === 'UniversityDegreeCredential') {
      const vc = await this.sdJwtInstance.issue<UniversityCredential & VC>(
        {
          name: 'John Doe',
          birthdate: '1990-01-01',
          university_name: 'Hopae University',
          degree: 'Bachelor of Science',
          vct: `${this.credentialIssuer}/credentials/types/UniversityDegreeCredential`,
          iss: this.credentialIssuer,
        },
        { _sd: ['name', 'birthdate', 'degree'] },
      );
      return vc;
    }

    if (type === 'DriverLicenseCredential') {
      return 'a366737461747573006776657273696f6e63312e3069646f63756d656e747381a367646f6354797065756f72672e69736f2e31383031332e352e312e6d444c6c6465766963655369676e6564a26a64657669636541757468a16f6465766963655369676e61747572658446a16131622d37a05845847444657669636541757468656e7469636174696f6e8343000000450000000000816868616e646f766572756f72672e69736f2e31383031332e352e312e6d444cd81841a058402038703715cdd257db29a0a1656bb6bded44bd950d6ce56459fb88b5b28684722a765347ecc36535a416e2a0cfd93ed31118893bb2d02684b4cc036ce857df966a6e616d65537061636573d81841a06c6973737565725369676e6564a26a697373756572417574688446a16131622d37a1636b69646431323334590162a667646f6354797065756f72672e69736f2e31383031332e352e312e6d444c6776657273696f6e63312e306c76616c6964697479496e666fa3667369676e6564c07818323032352d30342d30315430303a31373a31322e3336395a6976616c696446726f6dc07818323032352d30342d30315430303a31373a31322e3336395a6a76616c6964556e74696cc07818323032352d30352d30315430303a31373a31322e3336395a6c76616c756544696765737473a06d6465766963654b6579496e666fa1696465766963654b6579a5613102622d3101622d32d84058204ca6f4bbd37b799348117434e19d8eff6c81f7e530d4ea2749eacbab134c99f0622d33d840582018576f1f87b6347433e34060b358f25d99126d34a3fb7487a3e34456e6d2c060622d34d840582028b5b51cdeae0016cd06a91b01d430c9228cb0a8d4ecc6cecf25f87e38205a066f646967657374416c676f726974686d675348412d3235365840dbb4d38c5429ad1292a801a8cc257cdf500fb772f8fc60da15382df70471d17dcd2fbb5a23390ce405ed96aa6a911279d5277f4ef3dfc01e72204302aabc96ab6a6e616d65537061636573a1716f72672e69736f2e31383031332e352e318ad8185871a46672616e646f6dd84058202dce468fefb29b01f36a3f6f65bd2d8a82a2a5ad39fada535257ce063e2ed36e686469676573744944006c656c656d656e7456616c75656b444c31323334353637383971656c656d656e744964656e7469666965726f446f63756d656e74204e756d626572d8185865a46672616e646f6dd8405820420a067e0169c6bc25556ad8581a0846a803ed01c5627f59292f90f7f7273ba8686469676573744944016c656c656d656e7456616c7565644a6f686e71656c656d656e744964656e7469666965726a476976656e204e616d65d8185867a46672616e646f6dd8405820c73373d080c655544570448341d3bce9fb137c614f8b89be1cda6c4c5861e489686469676573744944026c656c656d656e7456616c756565536d69746871656c656d656e744964656e7469666965726b46616d696c79204e616d65d818586ba46672616e646f6dd8405820c12fab1ca19b031d5a0e25ad15f9cb17ef1a2c428ee9a38f5b3a498511c0bef2686469676573744944036c656c656d656e7456616c75656a313938382d30342d303171656c656d656e744964656e7469666965726a42697274682044617465d8185868a46672616e646f6dd8405820662a25f232870b825342701792bea82beded9ab3058f07568375c6f7f72c9342686469676573744944046c656c656d656e7456616c756562555371656c656d656e744964656e7469666965726f49737375696e6720436f756e747279d818586ea46672616e646f6dd84058200d570630adb91995fb1c6f62205a9d04d719166389a1d56e6319be02757292af686469676573744944056c656c656d656e7456616c756566434120444d5671656c656d656e744964656e7469666965727149737375696e6720417574686f72697479d8185869a46672616e646f6dd84058206b3b3f030d06ba033ca3ef7d28f6233c2aecb5998e413f7f10f9cd07b11777bb686469676573744944066c656c656d656e7456616c75656b313233204d61696e20537471656c656d656e744964656e7469666965726741646472657373d818586ba46672616e646f6dd8405820fa9338af5c10fe8f24e8c896ec16b8b783b7b7946f451249c140f520d3f80b26686469676573744944076c656c656d656e7456616c75656a323032342d30342d303171656c656d656e744964656e7469666965726a49737375652044617465d818586ca46672616e646f6dd8405820f8944de75d50dc690af4d37bf11676b1c8bcfcc557a30a2c836a42056236d197686469676573744944086c656c656d656e7456616c75656a323033342d30342d303171656c656d656e744964656e7469666965726b4578706972792044617465d8185861a46672616e646f6dd8405820e9e6f99b5d0e8871028e727a43ab84e6361cc7319bb5e7f3e8e08e9615aa68fe686469676573744944096c656c656d656e7456616c7565644d616c6571656c656d656e744964656e7469666965726647656e646572';
    }

    const vc = await this.sdJwtInstance.issue<VaccinationCredential & VC>(
      {
        name: 'John Doe',
        birthdate: '1990-01-01',
        vaccine_name: 'Hopae Vaccine',
        address: '123 Main Street',
        vct: `${this.credentialIssuer}/credentials/types/VaccinationCredential`,
        iss: this.credentialIssuer,
      },
      { _sd: ['name', 'birthdate', 'address'] },
    );
    return vc;
  }
}
